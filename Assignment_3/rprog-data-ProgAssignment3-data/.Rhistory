LU_IP_Location <- read.csv("C:/Users/hliu/Desktop/SQL statements/UAT DB dump/LU_IP_Location.csv", sep=";")
View(LU_IP_Location)
LU_IP_Blocks <- read.csv("C:/Users/hliu/Desktop/SQL statements/UAT DB dump/LU_IP_Blocks.csv", sep=";")
View(LU_IP_Blocks)
names(LU_IP_Location)[1] <- "locId"
head(LU_IP_Location)
LU_Location_subset = LU_IP_Location[,c(1,2,3,4)]
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
View(AccessAnalysis)
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
View(iptolocation)
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
View(iptolocation)
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
View(tempJoin)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
View(iptolocation)
names(iptolocation)[1] <- "remoteHost"
View(iptolocation)
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
View(tempJoin)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
View(AccessAnalysis)
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
View(iptolocation)
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
View(tempJoin)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
View(AccessAnalysis)
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
View(tempJoin)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
View(AccessAnalysis)
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AccessAnalysis)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
rm(AccessAnalysis)
rm(AccessAnalysis)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
rm(AnalysisJoin)
rm(tempJoin)
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
rm(AccessAnalysis)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
rm(AnalysisJoin)
rm(tempJoin)
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
view(iptolocation)
View(iptolocation)
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
rm(AccessAnalysis)
AnalysisJoin=merge(x = tempJoin, y =  LU_Location_subset, by = "locId", all.x = TRUE)
View(AnalysisJoin)
write.csv(AnalysisJoin, file = "AnalysisJoin.csv")
rm(AnalysisJoin)
rm(tempJoin)
AccessAnalysis <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/AccessAnalysis.csv", sep=";")
names(AccessAnalysis)[1] <- "id"
iptolocation <- read.csv("C:/Users/hliu/Desktop/SQL statements/PROD DB dump/iptolocation.csv", sep=";")
names(iptolocation)[1] <- "remoteHost"
tempJoin=merge(x = AccessAnalysis, y =  iptolocation, by = "remoteHost", all.x = TRUE)
makeCacheMatrix <- function(x = matrix()) {
-
+    # inv_cache will store the cached inverse matrix
+    inv_cache <- NULL
+    # Setting parameters for the matrix
+    set <- function(y) {
+        x <<- y
+        inv_cache <<- NULL
+    }
+    # to get the matrix
+    get <- function() x
+    # Setter for the inverse
+    setinv <- function(inverse) inv_cache <<- inverse
+    # Getter for the inverse
+    getinv <- function() inv_cache
+    # Return the matrix with our newly defined functions
+    list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
-        ## Return a matrix that is the inverse of 'x'
+    inv <- x$getinv()
+    # If the inverse is already calculated, return it
+    if (!is.null(inv)) {
+        message("getting cached data")
+        return(inv)
+    }
+    # The inverse is not yet calculated, so we calculate it
+    data <- x$get()
+    inv <- solve(data, ...)
+    # Cache the inverse
+    x$setinv(inv)
+    # Return it
+    return(inv)
}
cacheSolve <- function(x, ...) {
+    inv <- x$getinv()
+    if (!is.null(inv)) {
+        message("getting cached data")
+        return(inv)
+    }
+    data <- x$get()
+    inv <- solve(data, ...)
+    x$setinv(inv)
+    return(inv)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
-
+    # Creates a list object that contains a matrix, its inverse and several ac-
+    # cessor methods.
+    #
+    # Args:
+    #   x: The matrix to be stored.
+    #
+    # Returns:
+    #   The list object containing the matrix and its inverse.
+    #
+
+    # Initialize inverse matrix to NULL
+    i <- NULL
+
+    set <- function(y) {
+        x <<- y
+        i <<- NULL
+    }
+    get <- function() x
+    setInverse <- function(inverse) i <<- inverse
+    getInverse <- function() i
+    list(set = set, get = get,
+         setInverse = setInverse,
+         getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setInverse <- function(inverse) i <<- inverse
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
# inv_cache will store the cached inverse matrix
inv_cache <- NULL
# Setting parameters for the matrix
set <- function(y) {
x <<- y
inv_cache <<- NULL
}
# to get the matrix
get <- function() x
# Setter for the inverse
setinv <- function(inverse) inv_cache <<- inverse
# Getter for the inverse
getinv <- function() inv_cache
# Return the matrix with our newly defined functions
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
}
str(lm)
sample(1:10,4)
source('~/R_study/R programming/assignment_3/assignment3.R')
